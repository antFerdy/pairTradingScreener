package model;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;


public class QuoteLoader {
	URL url;
	URLConnection conn;
	InputStreamReader in;
	BufferedReader buff;
	
	private String urlLink;
	private String startMonth = "06";
	private String startDay = "01";
	private String startYear = "2011";
	private String tf = "d";
	private String endYear = "2014";
	private String endDay = "12";
	private String endMonth = "10";
	
	private Portfolio p = new Portfolio();
	private String prevPrice = null;

	
	public void loadQuotes(String ticker) {
		if(ticker == null)
			return;
		Stock tmp = new Stock();
		
		urlLink = "http://real-chart.finance.yahoo.com/table.csv?"
				+ "s=%s&a=%s&b=%s&c=%s&d=%s&e=%s&f=%s&g=%s&ignore=.csv";

		Object[] args = {
				ticker,
				startMonth,
				startDay,
				startYear,
				endMonth,
				endDay,
				endYear,
				tf};
		
		urlLink = String.format(urlLink, args);
		try {
			url = new URL(urlLink);
			conn = url.openConnection();
			
			InputStreamReader reader = new InputStreamReader(conn.getInputStream());
			buff = new BufferedReader(reader);
			
			int i = 0;
			while(true) {
				String cvsStr = buff.readLine();
				if(cvsStr == null) {
					break;
				}
				
				if(i == 0) {
					i++;
					continue;
				}
				
				StringTokenizer tokenizer = new StringTokenizer(cvsStr,",");

				String date = tokenizer.nextToken();
				tokenizer.nextToken();
				tokenizer.nextToken();
				tokenizer.nextToken();
				tokenizer.nextToken();
				tokenizer.nextToken();
				String adjClose = tokenizer.nextToken();
//				System.out.println(ticker + " : " + date + " : " + adjClose);
				DailyData data = new DailyData();
				data.setAdjClose(adjClose);
				data.setDate(date);
				tmp.addData(data);
				tmp.setTicker(ticker);
				

				i++;
			}
			
			List<DailyData> ddList = tmp.getData();
			List<DailyData> modList = new ArrayList<DailyData>();
			int size = ddList.size();
			for(int g = size - 1;g >= 0; g--) {
				DailyData dd = ddList.get(g);
				modList.add(dd);
			}
			tmp.setData(modList);
			
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			p.addStock(tmp);
			
		}
		
	}
	
	public Portfolio getPortfolio() {
		return p;
	}
	
	/***
	 * Сравниваем первые даты, находим самую старую дату и удаляем в цикле до менее старой даты. 
	 * Также поступаем с остальными акциями в портфолио. Таким образом получим что все массивы данных будут начинаться
	 * с одной даты
	 * @param port 
	 */
	public void checkDates(Portfolio port) {
		java.util.Date earlyDate = null;
		boolean isDatesNotEqual = false;
		
		for(Stock st : port.getWatchList()) {
			try {
				java.util.Date tmp = new SimpleDateFormat("yyyy-MM-dd").parse(st.getData().get(0).getDate());
				
				if(earlyDate == null) {
					earlyDate = tmp;
					continue;
				}
				
				if(tmp.after(earlyDate)) {
					earlyDate = tmp;
					isDatesNotEqual = true;
				}
				else if(tmp.before(earlyDate)) {
					isDatesNotEqual = true;
				}
				
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		
		if(isDatesNotEqual) {
			for(Stock st : p.getWatchList()) {	
				
				List<DailyData> list = st.getData();
				
				for(int i = 0; i < list.size(); i++) {
					String tmpDate = list.get(i).getDate();
					try {
						java.util.Date tmp = new SimpleDateFormat("yyyy-MM-dd").parse(tmpDate);
						if(tmp.before(earlyDate)) {
							list.remove(i);
						}
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
			return;
			
		}
		 
		
	}
}
